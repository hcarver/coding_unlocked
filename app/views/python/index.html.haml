.container-fluid
  %h1.text-center Try Python 3 Online

  %textarea#code.code-area

<script type="text/python3">
:plain
  import sys
  import traceback

  from browser import document as doc
  from browser import window as win

  def write(data):
      doc['code'].value += data

  sys.stdout.write = sys.stderr.write = write
  history = []
  current = 0
  _status = "main"  # or "block" if typing inside a block

  # execution namespace
  editor_ns = {}

  def cursorToEnd(*args):
      pos = len(doc['code'].value)
      doc['code'].setSelectionRange(pos, pos)
      doc['code'].scrollTop = doc['code'].scrollHeight;

  def get_col(area):
      # returns the column num of cursor
      sel = doc['code'].selectionStart
      lines = doc['code'].value.split('\n')
      for line in lines[:-1]:
          sel -= len(line) + 1
      return sel


  def myKeyPress(event):
      global _status, current
      if event.keyCode == 9:  # tab key
          event.preventDefault()
          doc['code'].value += "    "
      elif event.keyCode == 13:  # return
          src = doc['code'].value
          if _status == "main":
              currentLine = src[src.rfind('>>>') + 4:]
          elif _status == "3string":
              currentLine = src[src.rfind('>>>') + 4:]
              currentLine = currentLine.replace('\n... ', '\n')
          else:
              currentLine = src[src.rfind('...') + 4:]
          if _status == 'main' and not currentLine.strip():
              doc['code'].value += '\n>>> '
              event.preventDefault()
              return
          doc['code'].value += '\n'
          history.append(currentLine)
          current += 1
          if _status == "main" or _status == "3string":
              try:
                  _ = exec(currentLine, editor_ns)
                  if _ is not None:
                      print(repr(_))
                  doc['code'].value += '>>> '
                  _status = "main"
              except IndentationError:
                  doc['code'].value += '... '
                  _status = "block"
              except SyntaxError as msg:
                  if str(msg) == 'invalid syntax : triple string end not found' or \
                      str(msg).startswith('Unbalanced bracket'):
                      doc['code'].value += '... '
                      _status = "3string"
                  else:
                      traceback.print_exc()
                      doc['code'].value += '>>> '
                      _status = "main"
              except:
                  traceback.print_exc()
                  doc['code'].value += '>>> '
                  _status = "main"
          elif currentLine == "":  # end of block
              block = src[src.rfind('>>>') + 4:].splitlines()
              block = [block[0]] + [b[4:] for b in block[1:]]
              block_src = '\n'.join(block)
              # status must be set before executing code in globals()
              _status = "main"
              try:
                  _ = exec(block_src, editor_ns)
                  if _ is not None:
                      print(repr(_))
              except:
                  traceback.print_exc()
              doc['code'].value += '>>> '
          else:
              doc['code'].value += '... '
          cursorToEnd()
          event.preventDefault()
          #event.stopPropagation()


  def myKeyDown(event):
      global _status, current
      if event.keyCode == 37:  # left arrow
          sel = get_col(doc['code'])
          if sel < 5:
              event.preventDefault()
              event.stopPropagation()
      elif event.keyCode == 36:  # line start
          pos = doc['code'].selectionStart
          col = get_col(doc['code'])
          doc['code'].setSelectionRange(pos - col + 4, pos - col + 4)
          event.preventDefault()
      elif event.keyCode == 38:  # up
          if current > 0:
              pos = doc['code'].selectionStart
              col = get_col(doc['code'])
              # remove current line
              doc['code'].value = doc['code'].value[:pos - col + 4]
              current -= 1
              doc['code'].value += history[current]
          event.preventDefault()
      elif event.keyCode == 40:  # down
          if current < len(history) - 1:
              pos = doc['code'].selectionStart
              col = get_col(doc['code'])
              # remove current line
              doc['code'].value = doc['code'].value[:pos - col + 4]
              current += 1
              doc['code'].value += history[current]
          event.preventDefault()
      elif event.keyCode == 8:  # backspace
          src = doc['code'].value
          lstart = src.rfind('\n')
          if (lstart == -1 and len(src) < 5) or (len(src) - lstart < 6):
              event.preventDefault()
              event.stopPropagation()


  doc['code'].bind('keypress', myKeyPress)
  doc['code'].bind('keydown', myKeyDown)
  doc['code'].bind('click', cursorToEnd)
  v = sys.implementation.version
  doc['code'].value = "Python %s.%s.%s online, maintained by Hywel Carver, using code from Brython\n>>> " % (
      v[0], v[1], v[2])
  #doc['code'].value += 'Type "copyright", "credits" or "license" for more information.'
  doc['code'].focus()
  cursorToEnd()
</script>
:javascript
  $(function(){
    brython(1);
  })